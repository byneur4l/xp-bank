generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DB_LOCAL")
  referentialIntegrity = "prisma"
}

model AccountsBalance {
  id            Int        @id @default(autoincrement()) @db.UnsignedInt
  UsersLogin_id Int        @db.UnsignedInt
  balance       Float      @default(0)
  updated_at    DateTime   @default(now()) @updatedAt
  UsersLogin    UsersLogin @relation(fields: [UsersLogin_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "accountsbalance_userslogin_id_foreign")

  @@index([UsersLogin_id], map: "accountsbalance_userslogin_id_foreign")
}

model AccountsStatement {
  id                Int            @id @default(autoincrement()) @db.UnsignedInt
  value             Float
  UsersLogin_id     Int            @db.UnsignedInt
  OperationTypes_id Int            @db.UnsignedInt
  created_at        DateTime       @default(now())
  OperationTypes    OperationTypes @relation(fields: [OperationTypes_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "accountsstatement_operationtypes_id_foreign")
  UsersLogin        UsersLogin     @relation(fields: [UsersLogin_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "accountsstatement_userslogin_id_foreign")

  @@index([OperationTypes_id], map: "accountsstatement_operationtypes_id_foreign")
  @@index([UsersLogin_id], map: "accountsstatement_userslogin_id_foreign")
}

model Addresses {
  id               Int           @id @default(autoincrement()) @db.UnsignedInt
  PersonalDatas_id Int           @db.UnsignedInt
  postal_code      String        @db.VarChar(20)
  logradouro       String        @db.VarChar(50)
  complement       String        @db.VarChar(50)
  number           Int           @db.UnsignedInt
  city             String        @db.VarChar(255)
  district         String        @db.VarChar(255)
  state            String        @db.VarChar(255)
  state_code       String        @db.VarChar(2)
  country          String        @default("BR") @db.VarChar(255)
  updated_at       DateTime      @default(now()) @updatedAt
  PersonalDatas    PersonalDatas @relation(fields: [PersonalDatas_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "addresses_personaldatas_id_foreign")

  @@index([PersonalDatas_id], map: "addresses_personaldatas_id_foreign")
}

model FSExchangeOverview {
  id                       Int                        @id @default(autoincrement()) @db.UnsignedInt
  opening_price            Float
  closing_price            Float
  quantity                 Int                        @db.UnsignedInt
  max                      Float
  min                      Float
  lot_min                  Int                        @db.UnsignedInt
  date                     DateTime                   @unique(map: "fsexchangeoverview_date_unique") @db.DateTime(0)
  StocksFSExchangeOverview StocksFSExchangeOverview[]
}

model Genders {
  id            Int             @id @default(autoincrement()) @db.UnsignedInt
  name          String          @unique @db.VarChar(20)
  PersonalDatas PersonalDatas[]
}

model OperationTypes {
  id                Int                 @id @default(autoincrement()) @db.UnsignedInt
  name              String              @unique(map: "operationtypes_name_unique") @db.VarChar(20)
  AccountsStatement AccountsStatement[]
  Transactions      Transactions[]
}

model Orders {
  id              Int          @id @default(autoincrement()) @db.UnsignedInt
  UsersLogin_id   Int          @db.UnsignedInt
  Transactions_id Int          @db.UnsignedInt
  order_executed  Boolean
  created_at      DateTime     @default(now())
  sale_at         DateTime
  Transactions    Transactions @relation(fields: [Transactions_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "orders_transactions_id_foreign")
  UsersLogin      UsersLogin   @relation(fields: [UsersLogin_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "orders_userslogin_id_foreign")

  @@index([Transactions_id], map: "orders_transactions_id_foreign")
  @@index([UsersLogin_id], map: "orders_userslogin_id_foreign")
}

model PersonalDatas {
  id            Int         @id @default(autoincrement()) @db.UnsignedInt
  first_name    String      @db.VarChar(50)
  last_name     String      @db.VarChar(50)
  cpf           String      @unique(map: "personaldatas_cpf_unique") @db.VarChar(11)
  rg            String      @unique(map: "personaldatas_rg_unique") @db.VarChar(9)
  birth_date    String      @db.VarChar(10)
  Genders_id    Int         @default(1) @db.UnsignedInt
  UsersLogin_id Int         @db.UnsignedInt
  updated_at    DateTime    @default(now()) @updatedAt
  Genders       Genders     @relation(fields: [Genders_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "personaldatas_genders_id_foreign")
  UsersLogin    UsersLogin  @relation(fields: [UsersLogin_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "personaldatas_userslogin_id_foreign")
  Addresses     Addresses[]

  @@index([Genders_id], map: "personaldatas_genders_id_foreign")
  @@index([UsersLogin_id], map: "personaldatas_userslogin_id_foreign")
}

model Stocks {
  id                       Int                        @id @default(autoincrement()) @db.UnsignedInt
  symbol                   String                     @unique(map: "stocks_symbol_unique") @db.VarChar(4)
  name                     String                     @db.VarChar(255)
  StocksFSExchangeOverview StocksFSExchangeOverview[]
  Tickers                  Tickers[]
}

model StocksFSExchangeOverview {
  id                    Int                @id @default(autoincrement()) @db.UnsignedInt
  Stocks_id             Int                @db.UnsignedInt
  FSExchangeOverview_id Int                @db.UnsignedInt
  FSExchangeOverview    FSExchangeOverview @relation(fields: [FSExchangeOverview_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "stocksfsexchangeoverview_fsexchangeoverview_id_foreign")
  Stocks                Stocks             @relation(fields: [Stocks_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "stocksfsexchangeoverview_stocks_id_foreign")

  @@index([FSExchangeOverview_id], map: "stocksfsexchangeoverview_fsexchangeoverview_id_foreign")
  @@index([Stocks_id], map: "stocksfsexchangeoverview_stocks_id_foreign")
}

model Tickers {
  id        Int    @id @default(autoincrement()) @db.UnsignedInt
  ticker    String @unique(map: "tickers_ticker_unique") @db.VarChar(7)
  Stocks_id Int    @db.UnsignedInt
  Stocks    Stocks @relation(fields: [Stocks_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "tickers_stocks_id_foreign")

  @@index([Stocks_id], map: "tickers_stocks_id_foreign")
}

model Transactions {
  id                Int            @id @default(autoincrement()) @db.UnsignedInt
  Wallets_id        Int            @db.UnsignedInt
  Stocks_ticker     String         @db.VarChar(7)
  quantity          Int            @db.UnsignedInt
  price             Float
  OperationTypes_id Int            @db.UnsignedInt
  created_at        DateTime       @default(now())
  OperationTypes    OperationTypes @relation(fields: [OperationTypes_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "transactions_operationtypes_id_foreign")
  Wallets           Wallets        @relation(fields: [Wallets_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "transactions_wallets_id_foreign")
  Orders            Orders[]

  @@index([OperationTypes_id], map: "transactions_operationtypes_id_foreign")
  @@index([Wallets_id], map: "transactions_wallets_id_foreign")
}

model UsersLogin {
  id                Int                 @id @default(autoincrement()) @db.UnsignedInt
  email             String              @unique(map: "userslogin_email_unique") @db.VarChar(255)
  password          String              @db.VarChar(255)
  salt              String              @db.VarChar(255)
  created_at        DateTime            @default(now())
  updated_at        DateTime            @default(now()) @updatedAt
  AccountsBalance   AccountsBalance[]
  AccessHistory     AccessHistory[]
  AccountsStatement AccountsStatement[]
  Orders            Orders[]
  PersonalDatas     PersonalDatas[]
  Wallets           Wallets[]
}

model Wallets {
  id            Int            @id @default(autoincrement()) @db.UnsignedInt
  name          String         @db.VarChar(50)
  UsersLogin_id Int            @db.UnsignedInt
  created_at    DateTime       @default(now())
  updated_at    DateTime       @default(now()) @updatedAt
  UsersLogin    UsersLogin     @relation(fields: [UsersLogin_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "wallets_userslogin_id_foreign")
  Transactions  Transactions[]

  @@index([UsersLogin_id], map: "wallets_userslogin_id_foreign")
}

model AccessHistory {
  id            Int        @id @default(autoincrement()) @db.UnsignedInt
  UsersLogin_id Int        @db.UnsignedInt
  Platform_id   Int        @db.UnsignedInt
  last_access   DateTime   @default(now())
  UsersLogin    UsersLogin @relation(fields: [UsersLogin_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "accesshistory_userslogin_id_foreign")
  Platform      Platform   @relation(fields: [Platform_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "access_platform_id_foreign")

  @@index([UsersLogin_id], map: "accesshistory_userslogin_id_foreign")
  @@index([Platform_id], map: "access_platform_id_foreign")
}

model Platform {
  id            Int             @id @default(autoincrement()) @db.UnsignedInt
  name          String          @unique(map: "platform_name_unique") @db.VarChar(50)
  AccessHistory AccessHistory[]
}
